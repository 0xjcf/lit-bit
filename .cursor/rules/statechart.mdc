---
description: 
globs: 
alwaysApply: true
---
# Rust‑Statechart · Development Rules

> **Purpose** — Serve as a single source‑of‑truth for contributors (human or AI) working in Cursor IDE.
> Compliant code **must** satisfy every rule or provide an issue reference that justifies a deviation.

---

## 0 · Meta

* **File owner:** @0xjcf
* **Roadmap ref:** [v0.1 Roadmap Table](mdc:insert link to roadmap doc)
* **Enforced by:** `.github/workflows/check_rules.yml` (lint job parses this file and fails if unchecked items remain in a merged PR).

---

## 1 · Phase Completion Roadmap

> Detailed deliverables and progress for each phase are tracked in their respective checklist files, linked below. Completion of a phase is determined by its detailed checklist.

| Phase                  | Detailed Checklist Link                                                       |
|------------------------|-------------------------------------------------------------------------------|
| 0 Spec & Foundations   | [Phase 0 Checklist](mdc:../phases/00-spec-foundations/00_checklist.md)        |
| 1 Core Runtime         | [Phase 1 Checklist](mdc:../phases/01-core-runtime/01_checklist.md)            |
| 2 Hierarchy & Guards   | [Phase 2 Checklist](mdc:../phases/02-hierarchy-guards/02_checklist.md)        |
| 3 Parallel States      | *Link to be added once Phase 3 checklist is created*                          |
| 4 Minimal Actor Layer  | *Link to be added once Phase 4 checklist is created*                          |
| 5 Async & Side‑Effects | *Link to be added once Phase 5 checklist is created*                          |
| 6 Timers & Delays      | *Link to be added once Phase 6 checklist is created*                          |
| 7 Invoke/Child Actors  | *Link to be added once Phase 7 checklist is created*                          |
| 8 Diagram Generation   | *Link to be added once Phase 8 checklist is created*                          |
| 9 Tooling & Docs       | *Link to be added once Phase 9 checklist is created*                          |
| 10 Public Release      | *Link to be added once Phase 10 checklist is created*                         |

---

### Milestone rhythm

* **2–3 weeks per phase** for core engineering phases (1-7).
* **Continuous examples & tests** after each phase land.
* **Community beta** after Phase 8 (diagram tooling).

### Success KPIs _(target by v0.1)_

| KPI                                   | Target |
| ------------------------------------- | ----------------------------------- |
| Code size (no_std, Cortex-M0 blinky) | ≤ 4 KB flash |
| Max RAM overhead                      | ≤ 512 B for single actor, N=8 queue |
| Throughput (Tokio, release)           | ≥ 1 M events/s single-thread |
| Compile-time error clarity            | 90 % unknown-state mistakes explained in ≤3 lines |
| Docs coverage                         | ≥ 95 % rustdoc |
| CI matrix passes                      | Stable, beta, nightly; Linux, macOS, Windows |

---

## 2 · Coding Standards

1. **Zero‑Cost Core**
   * `#![no_std]` **default**. `std` is opt‑in via feature flag.
   * Absolutely **no heap** in Phase 1‑3 paths. Use `heapless` or const data.

2. **Feature Flags**
   * `async` – pulls `alloc`, `futures`, `async‑trait`.
   * `std` – enables Tokio mailbox and file I/O.
   * `diagram` – emits `TRANSITIONS` table + formatters; off in firmware builds.

3. **Naming**
   * Enums: `FooState`, `FooEvent`.
   * Traits: `StateMachine`, `Mailbox`, `Actor`.
   * Macros: `statechart!` (lower‑snake with bang!).

4. **Error Handling**
   * Compile‑time errors for: unknown state, duplicate transition, unreachable region, invalid `[parallel]` nesting.
   * Runtime `panic!` only allowed in `debug_assertions`; release must return `Err`.

5. **Style**
   * `rustfmt.toml` checked in repo ‑ **CI fails** on diff.
   * Clippy `pedantic` + selected `restriction` lints; exceptions need `#[allow]` + comment.

---

## 3 · Macro Grammar (Frozen after Phase 0)

_(Note: The grammar defined in `Spec.md` Section 2 is now considered stable for v0.1 and frozen as of the end of Phase 0. Any breaking changes require a major version bump.)_

```ebnf
// Note: This EBNF is a simplified reference.
// See Spec.md Section 2 for the definitive grammar.
statechart    ::= 'statechart!' '{' header_field+ state_definition* '}'
header_field  ::= 'name:' IDENT ',' | 'initial:' IDENT ',' | 'context:' TYPE ','
state_definition ::= 'state' IDENT state_attributes? '{' state_body_item* '}'
state_body_item  ::= 'on' EVENT '=>' STATE | 'after' DURATION '=>' STATE | ...
```

Any breaking grammar change after Phase 0 requires **major version bump**.

---

## 4 · Actor Layer Rules

* **Single‑threaded guarantee**: internal loop must `await` each handler **before** dequeuing next event.
* **Back‑pressure**: `try_send` returns `Err(evt)` when mailbox full; server side may provide `send().await`.
* **No global alloc** on no_std path; queue uses `heapless::spsc::Queue`.
* **Instrumentation hooks**: behind `trace` feature, call `on_transition(old, evt, new)` so users can hook logging.

---

## 5 · Diagram & Doc Rules

* `state_machine.to_dot()` **must** output valid DOT accepted by Graphviz ≥ 2.46.
* Mermaid output must render in GitHub MD preview.
* Each public example crate contains a `diagram.svg` committed (generated via CI job on commit).

---

## 6 · Testing & CI Matrix

* **Coverage**: `cargo tarpaulin --skip-clean` ≥ 90 % lines on `x86_64-unknown-linux-gnu`.
* **Build targets**: `thumbv6m-none-eabi`, `riscv32imac-unknown-none-elf`, `x86_64`, `wasm32-unknown-unknown`.
* **Size check**: `cargo bloat --release --no-default-features` < 4 KB for `blinky` binary.
* **Fuzzing**: quickcheck fuzz on event sequences (Phase 3+).

---

## 7 · Release Criteria (v0.1)

* All roadmap boxes checked.
* `README` shields: CI ✓, `no_std` ✓, codecov %, Crates.io version.
* `cargo audit` & `cargo deny` clean.
* API stability announced (macro grammar frozen until 0.2).
* First external crate (`statechart-embassy-demo`) compiles against release.

---

## 8 · Adding New Features (Post‑v0.1)

1. Open **RFC issue** with motivation & design sketch.
2. Get 👍 from @0xjcf + one contributor.
3. Land behind `unstable‑<feature>` flag.
4. After two minor versions with no breaking feedback, mark stable.

---

**Remember:** *Small, verifiable increments beat big‑bang rewrites.* Follow this rule file and the roadmap—we'll ship a gold‑standard, XState‑grade library that delights both embedded and backend Rustaceans.

