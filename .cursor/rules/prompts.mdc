---
description: 
globs: 
alwaysApply: true
---
# Prompts Maintenance Rules

> **Purpose** — Define conventions for creating and updating prompt artefacts so that they stay aligned with the development roadmap and the automation workflow.

---

## 0 · Meta

* **File owner:** @0xjcf
* **Related roadmap:** [`ROADMAP.md`](mdc:../../ROADMAP.md)
* **Enforced by:** future CI task (TODO `check_prompts.yml`).

---

## 1 · Directory Conventions

1. `prompts/analysis/` — high-level analysis files (e.g. `ROADMAP_OVERVIEW.md`).
2. `prompts/decomposition/` — detailed task break-downs.
3. `prompts/estimation/` — effort and timeline estimates.
4. `prompts/phases/NN-*` — phase-specific prompts and checklists.
5. `prompts/templates/` — reusable markdown prompt templates.
6. `prompts/workflows/` — step-by-step operational workflows.

> Do **not** nest additional directories without updating this rule file.

---

## 2 · Synchronisation with Roadmap

* **Source of truth:** `ROADMAP.md`.
* Every time the roadmap is changed, run `just sync-prompts` (to be implemented) which:
  1. Regenerates `analysis/ROADMAP_OVERVIEW.md`.
  2. Updates `phases/<NN>/00_checklist.md` with the latest deliverables.
  3. Flags any missing or outdated prompt files in CI.

Failure to keep prompts in sync **breaks CI**.

---

## 3 · Template Usage

* Use `templates/ROADMAP_PHASE_TEMPLATE.md` as the starting point for new phase briefs.
* Replace all `{{…}}` placeholders before committing.
* Keep checklists in markdown task-list format so GitHub can track progress.

---

## 4 · Writing Style

1. **Actionable** — prompts should instruct the AI/reader on *exactly* what to do next.
2. **Concise** — avoid redundancy; reference the roadmap instead of duplicating large tables.
3. **Self-contained** — each prompt must include enough context for a new contributor to act.
4. **Version-controlled** — never overwrite historical decisions; append new sections instead.

---

**Remember:** *Well-maintained prompts accelerate AI-assisted development.  Keep them tidy!*
