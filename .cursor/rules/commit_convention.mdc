---
description: 
globs: 
alwaysApply: false
---
# Commit Message Convention (Conventional Commits)

This project follows the [Conventional Commits](mdc:https:/www.conventionalcommits.org/en/v1.0.0) specification for Git commit messages. This format leads to more readable messages that are easier to follow when looking through the project history and enables potential automation (e.g., generating CHANGELOGs).

## Format

Each commit message consists of a **header**, a **body**, and a **footer**.

```
<type>(<scope>): <subject>
<BLANK LINE>
<body>
<BLANK LINE>
<footer>
```

### Header

The header is mandatory and includes:

-   **`<type>`:** Describes the kind of change:
    -   `feat`: A new feature for the user.
    -   `fix`: A bug fix for the user.
    *   `build`: Changes that affect the build system or external dependencies (e.g., `Cargo.toml`, `package.json`, `justfile`, `Dockerfile`).
    *   `chore`: Routine tasks, maintenance, dependency bumps, config changes that don't affect user functionality.
    *   `ci`: Changes to CI configuration files and scripts (e.g., GitHub Actions).
    *   `docs`: Documentation only changes (e.g., README, comments).
    *   `perf`: A code change that improves performance.
    *   `refactor`: A code change that neither fixes a bug nor adds a feature.
    *   `revert`: Reverts a previous commit.
    *   `style`: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc).
    *   `test`: Adding missing tests or correcting existing tests.
-   **`<scope>` (Optional):** Provides context for the change. This is often the component, package, or module affected (e.g., `chatbot-core`, `agent`, `client-intake`, `justfile`, `docs`). Use lowercase.
-   **`<subject>`:** A short, imperative mood description of the change (e.g., "add login button", not "added login button" or "adds login button"). Keep it concise and under 50 characters.

### Body (Optional)

-   Use the body to explain *what* and *why* vs. *how*.
-   Provide context, reasoning for the change, and contrast with previous behavior.
-   Use bullet points for lists of changes.
-   Wrap body lines at 72 characters to ensure readability in various Git tools.

### Footer (Optional)

-   **Breaking Changes:** Start with `BREAKING CHANGE:` followed by a description of the change, justification, and migration notes.
-   **References:** Link to issues, tickets, or phases (e.g., `Closes #123`, `Refs TKT-456`, `Closes Phase 5`).

## Example (Based on Phase 5 Completion)

```
feat(agent): implement onboarding agent placeholder (Phase 5)

- Bootstrap Rust agent structure for onboarding-agent using `dev-setup` (`--class agent`) via `just bootstrap-onboarding-agent` task.
- Implement placeholder logic in `src/main.rs`:
    - Add `clap` for argument parsing (`--brief`, `--data`, `--output`).
    - Add `tracing` for logging (visible with `RUST_LOG=info`).
    - Check input file existence.
    - Create dummy output file (`clarified-requirements.dummy.json`).
    - Add TODO comments for future implementation (parsing, analysis, LLM interaction).
- Correct `clap` dependency configuration in agent's `Cargo.toml`.
- Remove unused `mod agent;` declaration from `src/main.rs`.
- Add `README.md` for onboarding-agent detailing purpose, usage, and future work.
- Add `run-onboarding-agent` task to root `justfile` for easy execution.
- Update `PROGRESS.md` and Phase 5 prompt (`05-define-onboarding-agent.md`) success criteria.

Closes Phase 5
```

## Enforcement

Commit messages will be linted automatically using Husky and commitlint via the `commit-msg` Git hook. 