// src/core/mod.rs
// This module will house core state machine logic and types.
// For now, it's a placeholder.

#[allow(unused_imports)]
// Allow as it's needed for type resolution even if clippy thinks it's unused directly
use heapless::Vec;

// Re-export the StateMachine trait for easier use if core types implement it.
// Potentially, the macro-generated machine would be in a submodule of `core` or a user module.
pub use crate::StateMachine;

// --- Basic Type Placeholders (will be generic/generated by macro later) ---

// Using simple u8 for IDs as placeholders. Macro would generate enums.
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct StateId(pub u8);

#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct EventId(pub u8);

// Placeholder for context data. Macro would use the user-defined struct.
#[derive(Debug, Clone, Default)]
pub struct DefaultContext {/* ... fields ... */}

// Define function pointer types for actions and guards
pub type ActionFn<ContextType> = fn(&mut ContextType);
pub type GuardFn<ContextType, EventType> = fn(context: &ContextType, event: EventType) -> bool;

// --- Flat State Machine Definition ---

/// Represents a simple transition for a flat state machine.
#[derive(Debug, Copy, Clone)]
pub struct Transition<StateType, EventType, ContextType> {
    pub from_state: StateType,
    pub event: EventType,
    pub to_state: StateType,
    pub action: Option<ActionFn<ContextType>>,
    pub guard: Option<GuardFn<ContextType, EventType>>,
}

/// Defines the structure of a simple, flat state machine.
/// This would be largely generated by the `statechart!` macro.
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct StateNode<StateType, ContextType>
where
    StateType: Copy + Clone + PartialEq + Eq + core::hash::Hash + 'static,
    ContextType: Clone + 'static,
{
    pub id: StateType, // The unique ID of this state (a variant of the generated StateId enum)
    pub parent: Option<StateType>, // ID of the parent state, if any
    pub initial_child: Option<StateType>, // ID of the initial child state, if this is a composite state
    pub entry_action: Option<ActionFn<ContextType>>,
    pub exit_action: Option<ActionFn<ContextType>>,
    pub is_parallel: bool, // New field
}

#[derive(Clone)]
pub struct MachineDefinition<StateType, EventType, ContextType>
where
    StateType: Copy + Clone + PartialEq + Eq + core::hash::Hash + 'static, // This will be the generated StateId enum
    EventType: Copy + Clone + PartialEq + Eq + core::hash::Hash + 'static,
    ContextType: Clone + 'static,
{
    pub states: &'static [StateNode<StateType, ContextType>],
    pub transitions: &'static [Transition<StateType, EventType, ContextType>],
    pub initial_leaf_state: StateType,
}

// Manual Debug impl to avoid requiring StateType, EventType, ContextType to be Debug for MachineDefinition itself to be Debug
impl<StateType, EventType, ContextType> core::fmt::Debug
    for MachineDefinition<StateType, EventType, ContextType>
where
    StateType: Copy + Clone + PartialEq + Eq + core::hash::Hash + core::fmt::Debug + 'static,
    EventType: Copy + Clone + PartialEq + Eq + core::hash::Hash + core::fmt::Debug + 'static,
    ContextType: Clone + core::fmt::Debug + 'static,
{
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("MachineDefinition")
            .field("states", &self.states) // StateNode needs Debug for this to be useful
            .field("transitions", &self.transitions)
            .field("initial_leaf_state", &self.initial_leaf_state)
            .finish()
    }
}

impl<StateType, EventType, ContextType> MachineDefinition<StateType, EventType, ContextType>
where
    StateType: Copy + Clone + PartialEq + Eq + core::hash::Hash + 'static,
    EventType: Copy + Clone + PartialEq + Eq + core::hash::Hash + 'static,
    ContextType: Clone + 'static,
{
    pub const fn new(
        states: &'static [StateNode<StateType, ContextType>],
        transitions: &'static [Transition<StateType, EventType, ContextType>],
        initial_leaf_state: StateType,
    ) -> Self {
        MachineDefinition {
            states,
            transitions,
            initial_leaf_state,
        }
    }

    // Helper to find a state node by its ID
    pub fn get_state_node(
        &self,
        state_id: StateType,
    ) -> Option<&'static StateNode<StateType, ContextType>> {
        self.states.iter().find(|s_node| s_node.id == state_id)
    }

    // Helper to get the parent of a state, if it exists
    pub fn get_parent_of(&self, state_id: StateType) -> Option<StateType> {
        self.get_state_node(state_id)
            .and_then(|s_node| s_node.parent)
    }
}

// --- Runtime Instance ---

// Placeholder for hierarchy depth, make configurable or detect via macro later.
// const MAX_HIERARCHY_DEPTH: usize = 8; // Will be replaced by const generic M
// Make MAX_ACTIVE_REGIONS public so it can be accessed by lib.rs
pub const MAX_ACTIVE_REGIONS: usize = 4; // Max parallel regions/active states we can track

#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)] // Added for PathTooLongError
pub struct PathTooLongError;

#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum EntryErrorKind {
    CycleDetected,
    CapacityExceeded,
    StateNotFound, // Added for the case where get_state_node returns None
}

#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct EntryError {
    pub kind: EntryErrorKind,
    // Potentially add offending StateType here if needed for better error reporting
    // pub state_id: Option<StateType>
}

/// Runtime instance of a state machine.
///
/// Generic Parameters:
/// - `StateType`: The type representing state IDs (usually an enum).
/// - `EventType`: The type representing event IDs (usually an enum).
/// - `ContextType`: The user-defined context struct.
/// - `M`: Const generic for maximum hierarchy depth of a single state path.
/// - `MAX_NODES_FOR_COMPUTATION`: Const generic for buffer sizes needed for computations involving
///   multiple hierarchy branches, typically `M * MAX_ACTIVE_REGIONS`. This is used for temporary
///   collections during transition processing (e.g. exit sets).
#[derive(Debug)]
pub struct Runtime<
    StateType,
    EventType,
    ContextType,
    const M: usize,
    const MAX_NODES_FOR_COMPUTATION: usize,
> where
    StateType: Copy + Clone + PartialEq + Eq + core::hash::Hash + 'static,
    EventType: Copy + Clone + PartialEq + Eq + core::hash::Hash + 'static,
    ContextType: Clone + 'static,
{
    machine_def: MachineDefinition<StateType, EventType, ContextType>,
    active_leaf_states: heapless::Vec<StateType, MAX_ACTIVE_REGIONS>,
    context: ContextType,
}

// Helper function, can be outside impl Runtime or a static method if preferred.
// Making it a free function for now to ensure no `self` issues initially.
fn enter_state_recursive_logic<StateType, EventType, ContextType>(
    machine_def: &MachineDefinition<StateType, EventType, ContextType>,
    context: &mut ContextType,
    state_id_to_enter: StateType,
    accumulator: &mut heapless::Vec<StateType, MAX_ACTIVE_REGIONS>,
    visited_during_entry: &mut heapless::Vec<StateType, { MAX_ACTIVE_REGIONS * 2 }>, // Max theoretical active states + some buffer for path
) -> Result<(), EntryError>
// Changed return type
where
    StateType: Copy + Clone + PartialEq + Eq + core::hash::Hash + core::fmt::Debug + 'static,
    EventType: Copy + Clone + PartialEq + Eq + core::hash::Hash + 'static,
    ContextType: Clone + 'static,
{
    let is_cycle = visited_during_entry.contains(&state_id_to_enter);
    debug_assert!(
        !is_cycle,
        "Cycle detected during enter_state_recursive_logic for state: {state_id_to_enter:?}"
    );
    if is_cycle {
        return Err(EntryError {
            kind: EntryErrorKind::CycleDetected,
        });
    }

    let push_failed = visited_during_entry.push(state_id_to_enter).is_err();
    debug_assert!(
        !push_failed,
        "Visited entry path too long (capacity {}) for state: {state_id_to_enter:?}",
        visited_during_entry.capacity()
    );
    if push_failed {
        return Err(EntryError {
            kind: EntryErrorKind::CapacityExceeded,
        });
    }

    if let Some(node) = machine_def.get_state_node(state_id_to_enter) {
        if let Some(entry_fn) = node.entry_action {
            entry_fn(context);
        }

        if node.is_parallel {
            for s_node_in_def in machine_def.states {
                if s_node_in_def.parent == Some(state_id_to_enter) {
                    // Propagate error using ? operator
                    enter_state_recursive_logic(
                        machine_def,
                        context,
                        s_node_in_def.id,
                        accumulator,
                        visited_during_entry,
                    )?;
                }
            }
        // Collapsed else if here
        } else if let Some(initial_child_id) = node.initial_child {
            enter_state_recursive_logic(
                machine_def,
                context,
                initial_child_id,
                accumulator,
                visited_during_entry,
            )?;
        // This is the accumulator push for leaf states. If it fails, it's a critical sizing error.
        } else if accumulator.push(state_id_to_enter).is_err() {
            // Unconditional panic as this indicates MAX_ACTIVE_REGIONS is too small.
            panic!(
                "MAX_ACTIVE_REGIONS ({}) exceeded while accumulating leaf states for {:?}.",
                accumulator.capacity(),
                state_id_to_enter
            );
        }
    } else {
        // State not found
        if cfg!(debug_assertions) {
            panic!(
                "enter_state_recursive_logic: State ID ({state_id_to_enter:?}) not found in MachineDefinition."
            );
        } else {
            return Err(EntryError {
                kind: EntryErrorKind::StateNotFound,
            });
        }
    }
    let _ = visited_during_entry.pop();
    Ok(())
}

// Define PotentialTransition struct at the module level
#[derive(Debug, Clone, Copy)]
struct PotentialTransition<StateType, EventType, ContextType>
where
    StateType: Copy + Clone + PartialEq + Eq + core::hash::Hash + core::fmt::Debug + 'static,
    EventType: Copy + Clone + PartialEq + Eq + core::hash::Hash + 'static,
    ContextType: Clone + 'static,
{
    source_leaf_id: StateType,
    #[allow(dead_code)] // Will be used in full send() logic for arbitration
    transition_from_state_id: StateType,
    target_state_id: StateType,
    transition_ref: &'static Transition<StateType, EventType, ContextType>,
}

impl<StateType, EventType, ContextType, const M: usize, const MAX_NODES_FOR_COMPUTATION: usize>
    Runtime<StateType, EventType, ContextType, M, MAX_NODES_FOR_COMPUTATION>
where
    StateType: Copy + Clone + PartialEq + Eq + core::hash::Hash + core::fmt::Debug + 'static,
    EventType: Copy + Clone + PartialEq + Eq + core::hash::Hash + core::fmt::Debug + 'static,
    ContextType: Clone + 'static,
{
    // Removed old fn enter_state_recursive(&mut self, ...) here

    /// Creates a new runtime instance for the given machine definition and initial context.
    ///
    /// # Panics
    ///
    /// This function may panic under the following conditions:
    /// - If the `initial_leaf_state` specified in the `MachineDefinition` is not found in the `STATES` array.
    /// - If `MAX_ACTIVE_REGIONS` is exceeded while trying to push initial leaf states (e.g. for a parallel initial state).
    /// - If `M` (formerly `MAX_HIERARCHY_DEPTH`) is exceeded during internal path calculations (via `expect` calls).
    pub fn new(
        machine_def: MachineDefinition<StateType, EventType, ContextType>,
        initial_context: ContextType,
    ) -> Self {
        let mut mutable_context = initial_context;
        let mut active_states_vec = heapless::Vec::new();
        let mut visited_for_initial_entry: heapless::Vec<StateType, { MAX_ACTIVE_REGIONS * 2 }> =
            heapless::Vec::new();

        let top_level_initial_state_id = machine_def.initial_leaf_state;

        // Handle Result from enter_state_recursive_logic
        if let Err(entry_error) = enter_state_recursive_logic(
            &machine_def,
            &mut mutable_context,
            top_level_initial_state_id,
            &mut active_states_vec,
            &mut visited_for_initial_entry,
        ) {
            panic!("Failed to initialize state machine due to entry error: {entry_error:?}");
        }

        assert!(
            !active_states_vec.is_empty(),
            "Initial state ID specified in MachineDefinition not found in STATES array, or initial state setup resulted in no active states (after successful entry logic completion implies this should not happen)."
        );

        Runtime {
            machine_def,
            active_leaf_states: active_states_vec,
            context: mutable_context, // context is moved here
        }
    }

    pub fn state(&self) -> heapless::Vec<StateType, MAX_ACTIVE_REGIONS> {
        self.active_leaf_states.clone()
    }
    pub fn context(&self) -> &ContextType {
        &self.context
    }
    pub fn context_mut(&mut self) -> &mut ContextType {
        &mut self.context
    }

    // --- Helper methods for hierarchical transitions ---

    /// Collects the path from a leaf state up to the root, including the leaf itself.
    /// The path is returned with the leaf state at index 0 and ancestors following.
    fn get_path_to_root(
        &self,
        leaf_state_id: StateType,
    ) -> Result<heapless::Vec<StateType, M>, PathTooLongError> {
        // Changed return type
        let mut path: heapless::Vec<StateType, M> = heapless::Vec::new();
        let mut current_id = Some(leaf_state_id);
        while let Some(id) = current_id {
            if path.push(id).is_err() {
                // Changed from expect to check Result
                return Err(PathTooLongError);
            }
            current_id = self.machine_def.get_parent_of(id);
        }
        Ok(path)
    }

    /// Finds the Least Common Ancestor (LCA) of two states.
    fn find_lca(
        &self,
        state1_id: StateType,
        state2_id: StateType,
    ) -> Result<Option<StateType>, PathTooLongError> {
        if state1_id == state2_id {
            return Ok(Some(state1_id));
        }

        let path1 = self.get_path_to_root(state1_id)?; // Propagate error
        let path2 = self.get_path_to_root(state2_id)?; // Propagate error

        if path1.contains(&state2_id) {
            return Ok(Some(state2_id));
        }
        if path2.contains(&state1_id) {
            return Ok(Some(state1_id));
        }

        Ok(path1
            .iter()
            .rev()
            .find(|&&ancestor1_from_path1| path2.contains(&ancestor1_from_path1))
            .copied())
    }

    fn is_proper_ancestor(
        &self,
        ancestor_candidate_id: StateType,
        descendant_candidate_id: StateType,
    ) -> Result<bool, PathTooLongError> {
        // Changed return type
        if ancestor_candidate_id == descendant_candidate_id {
            return Ok(false);
        }
        match self.get_path_to_root(descendant_candidate_id) {
            Ok(path_from_descendant) => Ok(path_from_descendant
                .iter()
                .skip(1)
                .any(|&p_state| p_state == ancestor_candidate_id)),
            Err(e) => {
                // Propagate PathTooLongError
                Err(e)
            }
        }
    }

    // Helper to find the direct child of parent_id that is currently active or an ancestor of an active leaf.
    fn get_active_child_of(&self, parent_id: StateType) -> Option<StateType> {
        for &leaf_id in &self.active_leaf_states {
            if leaf_id == parent_id {
                continue;
            }

            let path_result = self.get_path_to_root(leaf_id);
            match path_result {
                Ok(path_from_leaf_to_root) => {
                    for i in 1..path_from_leaf_to_root.len() {
                        if path_from_leaf_to_root[i] == parent_id {
                            return Some(path_from_leaf_to_root[i - 1]);
                        }
                    }
                }
                Err(PathTooLongError) => {
                    debug_assert!(
                        false,
                        "PathTooLongError in get_active_child_of for leaf {leaf_id:?}. This may indicate M is too small."
                    );
                    // In release, we can't determine the child via this path, so continue to the next leaf.
                }
            }
        }
        None
    }

    // Helper to compute the ordered list of states to exit.
    fn compute_ordered_exit_set(
        &self,
        leaf_state_id_being_exited: StateType,
        lca_id: Option<StateType>,
    ) -> Result<heapless::Vec<StateType, MAX_NODES_FOR_COMPUTATION>, PathTooLongError> {
        // Return type uses new name

        let mut states_to_potentially_exit: heapless::Vec<StateType, M> = heapless::Vec::new();
        let mut collected_for_exit: heapless::Vec<StateType, MAX_NODES_FOR_COMPUTATION> =
            heapless::Vec::new();

        // 1. Collect all states on the direct path from the active leaf up to (but not including) the LCA.
        let mut current_id_on_path = Some(leaf_state_id_being_exited);
        while let Some(id) = current_id_on_path {
            if lca_id == Some(id) {
                break;
            }
            // Check capacity before pushing to states_to_potentially_exit
            if states_to_potentially_exit.push(id).is_err() {
                // This implies M is too small for the hierarchy depth of this branch.
                return Err(PathTooLongError);
            }
            current_id_on_path = self.machine_def.get_parent_of(id);
        }
        // states_to_potentially_exit is now [leaf, p1, p2, ..., child_of_lca]

        // 2. For each state collected, recursively add its active children (for composite/parallel) first, then itself, to ensure post-order.
        //    Use a helper that ensures each state is added to `collected_for_exit` only once.
        let mut already_added_to_final_list: heapless::Vec<StateType, MAX_NODES_FOR_COMPUTATION> =
            heapless::Vec::new();
        let mut recursion_guard_vec: heapless::Vec<StateType, M> = heapless::Vec::new(); // Declare vec for recursion guard

        for &state_to_process_for_exit in states_to_potentially_exit.iter().rev() {
            // Process from child_of_lca down to leaf
            self.collect_states_for_exit_post_order(
                state_to_process_for_exit,
                lca_id,
                &mut collected_for_exit,
                &mut already_added_to_final_list,
                &mut recursion_guard_vec, // Pass the new guard
            );
        }
        Ok(collected_for_exit)
    }

    // Recursive helper for compute_ordered_exit_set
    fn collect_states_for_exit_post_order(
        &self,
        current_state_id: StateType,
        lca_id: Option<StateType>,
        ordered_exit_list: &mut heapless::Vec<StateType, MAX_NODES_FOR_COMPUTATION>,
        already_added: &mut heapless::Vec<StateType, MAX_NODES_FOR_COMPUTATION>,
        recursion_guard: &mut heapless::Vec<StateType, M>, // M should be sufficient for path depth
    ) {
        if Some(current_state_id) == lca_id || already_added.contains(&current_state_id) {
            return;
        }

        let is_cycle_in_exit = recursion_guard.contains(&current_state_id);
        debug_assert!(
            !is_cycle_in_exit,
            "Cycle detected during collect_states_for_exit_post_order for state: {current_state_id:?}"
        );
        if is_cycle_in_exit {
            return;
        }

        let push_guard_failed = recursion_guard.push(current_state_id).is_err();
        debug_assert!(
            !push_guard_failed,
            "Recursion depth exceeded in collect_states_for_exit_post_order (capacity {}) for state: {current_state_id:?}",
            recursion_guard.capacity()
        );
        if push_guard_failed {
            return;
        }

        let Some(current_node) = self.machine_def.get_state_node(current_state_id) else {
            let _ = recursion_guard.pop(); // Pop before returning if node not found
            return;
        };

        // Mark as visited for *this specific traversal context* to avoid issues if it's an ancestor of another part of main path.
        // The main `already_added` list prevents adding to `ordered_exit_list` multiple times.

        if current_node.is_parallel {
            for region_node in self
                .machine_def
                .states
                .iter()
                .filter(|n| n.parent == Some(current_state_id))
            {
                // Check if region is active (has a descendant in active_leaf_states)
                let mut region_active_leaf: Option<StateType> = None;
                for &leaf in &self.active_leaf_states {
                    if self.is_descendant_or_self(leaf, region_node.id) {
                        region_active_leaf = Some(leaf);
                        break;
                    }
                }
                if let Some(active_leaf_in_region) = region_active_leaf {
                    // Recurse from the active leaf of the region, stopping at the region itself (as region will be added later)
                    self.collect_states_for_exit_post_order(
                        active_leaf_in_region,
                        Some(region_node.id),
                        ordered_exit_list,
                        already_added,
                        recursion_guard,
                    );
                }
                // After region's children, add region itself (if not already added)
                if !already_added.contains(&region_node.id) {
                    self.collect_states_for_exit_post_order(
                        region_node.id,
                        lca_id,
                        ordered_exit_list,
                        already_added,
                        recursion_guard,
                    );
                }
            }
        } else if current_node.initial_child.is_some() {
            // Composite non-parallel
            if let Some(active_direct_child) = self.get_active_child_of(current_state_id) {
                self.collect_states_for_exit_post_order(
                    active_direct_child,
                    lca_id,
                    ordered_exit_list,
                    already_added,
                    recursion_guard,
                );
            }
        }

        // Add current_state_id to the list *after* its children have been processed and added.
        if !already_added.contains(&current_state_id) {
            // Ensure it's added only once. If these critical lists overflow, it's a fatal error.
            ordered_exit_list.push(current_state_id).expect(
                "Exit list (ordered_exit_list) overflow due to MAX_NODES_FOR_COMPUTATION too small",
            );

            already_added.push(current_state_id).expect(
                "Exit list (already_added) overflow due to MAX_NODES_FOR_COMPUTATION too small",
            );
        }
        let _ = recursion_guard.pop(); // Pop after processing this node and its children
    }

    // is_descendant_or_self method from before
    fn is_descendant_or_self(&self, candidate_id: StateType, ancestor_id: StateType) -> bool {
        if candidate_id == ancestor_id {
            return true;
        }
        match self.is_proper_ancestor(ancestor_id, candidate_id) {
            Ok(is_proper) => is_proper,
            Err(_) => {
                if cfg!(debug_assertions) {
                    panic!("PathTooLongError in is_descendant_or_self, cannot determine reliably.");
                } else {
                    // Default to false if ancestry check had an error in release.
                    false
                }
            }
        }
    }

    /// Executes entry actions from a state (typically child of LCA) down to a target leaf state.
    /// This involves entering the `target_state_id` and then drilling down to its own initial leaf if it's composite.
    fn execute_entry_actions_from_lca(
        &mut self,
        target_state_id: StateType,
        lca_id: Option<StateType>,
    ) -> heapless::Vec<StateType, MAX_ACTIVE_REGIONS> {
        // This function's error handling for path needs thought
        let mut new_active_leaf_states: heapless::Vec<StateType, MAX_ACTIVE_REGIONS> =
            heapless::Vec::new();
        let mut visited_for_current_entry: heapless::Vec<StateType, { MAX_ACTIVE_REGIONS * 2 }> =
            heapless::Vec::new();

        let path_to_target_result = self.get_path_to_root(target_state_id);
        let Ok(mut path_to_target) = path_to_target_result else {
            debug_assert!(
                path_to_target_result.is_ok(),
                "PathTooLongError encountered when trying to get path for target_state_id in execute_entry_actions_from_lca"
            );
            return new_active_leaf_states;
        };
        path_to_target.reverse();

        let mut start_entering_idx = 0;
        if let Some(lca) = lca_id {
            if let Some(pos) = path_to_target.iter().position(|&s| s == lca) {
                start_entering_idx = pos + 1;
            }
        }

        if start_entering_idx >= path_to_target.len() {
            if self.machine_def.get_state_node(target_state_id).is_some() {
                let result = enter_state_recursive_logic(
                    &self.machine_def,
                    &mut self.context,
                    target_state_id,
                    &mut new_active_leaf_states,
                    &mut visited_for_current_entry,
                );
                #[cfg(debug_assertions)]
                {
                    if let Err(e) = result {
                        panic!(
                            "Entry error during execute_entry_actions_from_lca (direct target): {e:?}"
                        );
                    }
                }
                #[cfg(not(debug_assertions))]
                {
                    let _ = result; // Suppress unused_variable warning in release
                }
            }
            return new_active_leaf_states;
        }

        for i in start_entering_idx..path_to_target.len() {
            let state_on_path_id = path_to_target[i];

            if state_on_path_id == target_state_id {
                let result = enter_state_recursive_logic(
                    &self.machine_def,
                    &mut self.context,
                    state_on_path_id,
                    &mut new_active_leaf_states,
                    &mut visited_for_current_entry,
                );
                #[cfg(debug_assertions)]
                {
                    if let Err(e) = result {
                        panic!(
                            "Entry error during execute_entry_actions_from_lca (target on path): {e:?}"
                        );
                    }
                }
                #[cfg(not(debug_assertions))]
                {
                    let _ = result; // Suppress unused_variable warning in release
                }
                break;
            }
            if let Some(node) = self.machine_def.get_state_node(state_on_path_id) {
                if node.is_parallel {
                    let result = enter_state_recursive_logic(
                        &self.machine_def,
                        &mut self.context,
                        state_on_path_id,
                        &mut new_active_leaf_states,
                        &mut visited_for_current_entry,
                    );
                    #[cfg(debug_assertions)]
                    {
                        if let Err(e) = result {
                            panic!(
                                "Entry error during execute_entry_actions_from_lca (parallel on path): {e:?}"
                            );
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        let _ = result; // Suppress unused_variable warning in release
                    }
                    break;
                }
                if let Some(entry_fn) = node.entry_action {
                    entry_fn(&mut self.context);
                }
            }
        }
        new_active_leaf_states
    }

    /// Sends an event to the state machine for processing.
    ///
    /// This is a **TEMPORARY IMPLEMENTATION** and will be significantly refactored
    /// to support parallel states.
    ///
    /// # Panics
    /// Contains `expect` and `panic` calls that might trigger if `MAX_ACTIVE_REGIONS` or
    /// `M` (formerly `MAX_HIERARCHY_DEPTH`) are too small, or if internal logic errors occur.
    #[allow(clippy::too_many_lines)]
    pub fn send(&mut self, event: EventType) -> bool {
        let mut potential_transitions: heapless::Vec<
            PotentialTransition<StateType, EventType, ContextType>,
            MAX_NODES_FOR_COMPUTATION, // Changed capacity from MAX_ACTIVE_REGIONS
        > = heapless::Vec::new();
        let current_active_leaves_snapshot = self.active_leaf_states.clone();

        for &active_leaf_id in &current_active_leaves_snapshot {
            let mut check_state_id_opt = Some(active_leaf_id);
            'hierarchy_search: while let Some(check_state_id) = check_state_id_opt {
                if self.machine_def.get_state_node(check_state_id).is_some() {
                    for t_def in self.machine_def.transitions {
                        if t_def.from_state == check_state_id && t_def.event == event {
                            if let Some(guard_fn) = t_def.guard {
                                if !guard_fn(&self.context, event) {
                                    continue;
                                }
                            }
                            let pot_trans = PotentialTransition {
                                source_leaf_id: active_leaf_id, // The leaf that sourced this potential path
                                transition_from_state_id: check_state_id, // The actual state defining the transition
                                target_state_id: t_def.to_state,
                                transition_ref: t_def,
                            };
                            let push_result = potential_transitions.push(pot_trans);
                            #[cfg(debug_assertions)]
                            assert!(
                                push_result.is_ok(),
                                "Exceeded capacity for potential transitions..."
                            );
                            if push_result.is_err() {
                                // In release, if we can't store it, we can't consider it.
                                break 'hierarchy_search;
                            }
                            // Found a transition for this level, break from hierarchy search for this active_leaf_id
                            break 'hierarchy_search;
                        }
                    }
                }
                check_state_id_opt = self.machine_def.get_parent_of(check_state_id);
            }
        }

        if potential_transitions.is_empty() {
            return false;
        }

        let mut arbitrated_transitions: heapless::Vec<
            PotentialTransition<StateType, EventType, ContextType>,
            MAX_NODES_FOR_COMPUTATION, // Also update here if it's a subset of potential_transitions. Or keep as MAX_ACTIVE_REGIONS if arbitration reduces it.
                                       // Review suggests potential_transitions is the one needing more cap. Arbitrated is likely smaller or equal.
                                       // For safety, let's make arbitrated_transitions also MAX_NODES_FOR_COMPUTATION, as it stores clones from potential_transitions.
        > = heapless::Vec::new();
        'candidate_loop: for pt_candidate in &potential_transitions {
            for other_pt in &potential_transitions {
                if core::ptr::eq(pt_candidate, other_pt) {
                    continue;
                }

                // Attempt to check ancestry. If error, treat as inconclusive (don't skip pt_candidate on this basis).
                match self.is_proper_ancestor(
                    pt_candidate.transition_from_state_id,
                    other_pt.transition_from_state_id,
                ) {
                    Ok(is_ancestor) => {
                        if is_ancestor {
                            // pt_candidate's source is an ancestor of other_pt's source.
                            // This means other_pt is more specific. So, pt_candidate should be skipped.
                            continue 'candidate_loop;
                        }
                    }
                    Err(_) => {
                        // PathTooLongError: Cannot determine ancestry. Conservatively don't skip pt_candidate.
                        // This might lead to less optimal arbitration if paths are too long for M,
                        // but avoids panic and ensures forward progress if possible.
                        // Removed eprintln! for no_std compatibility.
                        #[cfg(debug_assertions)]
                        {
                            // Consider a less disruptive debug output if needed, or just let it pass silently.
                            // For now, no specific debug output here for release builds.
                        }
                    }
                }
                // No need for the other is_proper_ancestor check, as the roles are swapped.
                // The goal is: if pt_candidate is an ancestor of other_pt, pt_candidate is skipped.
                // If other_pt is an ancestor of pt_candidate, pt_candidate is NOT skipped by this check (other_pt would be skipped when it's the candidate).
            }
            let push_result = arbitrated_transitions.push(pt_candidate.clone());
            #[cfg(debug_assertions)]
            assert!(
                push_result.is_ok(),
                "Exceeded capacity for arbitrated_transitions."
            );
            if push_result.is_err() {
                break;
            }
        }

        if arbitrated_transitions.is_empty() {
            return false;
        }

        // --- Start of new logic for processing multiple transitions ---
        let mut overall_transition_occurred = false;
        let mut next_active_leaf_states = self.active_leaf_states.clone();
        let mut states_exited_this_step: heapless::Vec<StateType, MAX_NODES_FOR_COMPUTATION> =
            heapless::Vec::new();
        let mut entry_execution_list: heapless::Vec<
            (StateType, Option<StateType>, StateType),
            MAX_ACTIVE_REGIONS,
        > = heapless::Vec::new();

        // Phase 1: Process exits and actions for all transitions first
        for trans_info in &arbitrated_transitions {
            let source_state_id = trans_info.transition_from_state_id;
            let target_state_id = trans_info.target_state_id;
            let active_leaf_for_this_trans = trans_info.source_leaf_id;

            overall_transition_occurred = true;

            let is_simple_leaf_self_transition = source_state_id == target_state_id
                && self.is_descendant_or_self(active_leaf_for_this_trans, source_state_id)
                && self
                    .machine_def
                    .get_state_node(source_state_id)
                    .is_some_and(|n| !n.is_parallel && n.initial_child.is_none());

            if is_simple_leaf_self_transition {
                // True self-transition on an active simple leaf state
                if let Some(node) = self.machine_def.get_state_node(source_state_id) {
                    if !states_exited_this_step.contains(&source_state_id) {
                        if let Some(exit_fn) = node.exit_action {
                            exit_fn(&mut self.context);
                        }
                        states_exited_this_step
                            .push(source_state_id)
                            .expect("states_exited_this_step overflow for simple self-trans");
                    }
                }
                if let Some(action_fn) = trans_info.transition_ref.action {
                    action_fn(&mut self.context);
                }
                // Entry action will be handled by execute_entry_actions_from_lca via entry_execution_list
                // if let Some(node) = self.machine_def.get_state_node(source_state_id) {
                //     if let Some(entry_fn) = node.entry_action {
                //         entry_fn(&mut self.context);
                //     }
                // }
                entry_execution_list
                    .push((
                        source_state_id,
                        Some(source_state_id),
                        active_leaf_for_this_trans,
                    ))
                    .expect("entry_execution_list overflow for simple self-trans");
            } else {
                // General LCA path (external transition or self-transition on composite state)
                let lca_id_result = self.find_lca(active_leaf_for_this_trans, target_state_id);
                let lca_id = match lca_id_result {
                    Ok(l) => l,
                    Err(_path_too_long_error) => {
                        if cfg!(debug_assertions) {
                            panic!(
                                "PathTooLongError from find_lca for states {active_leaf_for_this_trans:?}, {target_state_id:?}"
                            );
                        } else {
                            // If LCA computation fails, abort the entire send operation for safety.
                            return false;
                        }
                    }
                };

                let states_to_exit_for_branch_result =
                    self.compute_ordered_exit_set(active_leaf_for_this_trans, lca_id);
                let Ok(states_to_exit_for_branch) = states_to_exit_for_branch_result else {
                    if cfg!(debug_assertions) {
                        panic!(
                            "PathTooLongError from compute_ordered_exit_set for leaf {active_leaf_for_this_trans:?}"
                        );
                    } else {
                        // If exit set computation fails, abort the entire send operation for safety.
                        return false;
                    }
                };

                for &state_to_exit_id in &states_to_exit_for_branch {
                    if !states_exited_this_step.contains(&state_to_exit_id) {
                        if let Some(node) = self.machine_def.get_state_node(state_to_exit_id) {
                            if let Some(exit_fn) = node.exit_action {
                                exit_fn(&mut self.context);
                            }
                        }
                        states_exited_this_step
                            .push(state_to_exit_id)
                            .expect("states_exited_this_step overflow for branch");
                    }
                }

                // Collapsed if: It's a self-transition, and its exit action hasn't run yet.
                if source_state_id == target_state_id
                    && !states_exited_this_step.contains(&source_state_id)
                {
                    if let Some(node) = self.machine_def.get_state_node(source_state_id) {
                        if let Some(exit_fn) = node.exit_action {
                            exit_fn(&mut self.context);
                        }
                    }
                    states_exited_this_step
                        .push(source_state_id)
                        .expect("states_exited_this_step overflow for composite self-trans");
                }

                /*
                next_active_leaf_states.retain(|&leaf| {
                    // Retain if NOT part of this branch's exits AND NOT a descendant of a composite self-transition source.
                    !(
                        states_to_exit_for_branch.iter().any(|&exited_ancestor_or_self| {
                            self.is_descendant_or_self(leaf, exited_ancestor_or_self)
                        })
                        || (source_state_id == target_state_id && self.is_descendant_or_self(leaf, source_state_id))
                    )
                });
                */

                if let Some(action_fn) = trans_info.transition_ref.action {
                    action_fn(&mut self.context);
                }

                entry_execution_list
                    .push((target_state_id, lca_id, active_leaf_for_this_trans))
                    .expect("entry_execution_list overflow");
            }
        } // End loop over arbitrated_transitions

        // Phase 2: Update active leaf states based on global exits collected in states_exited_this_step
        if overall_transition_occurred {
            // Only modify if any transition was processed
            next_active_leaf_states.retain(|&leaf| {
                !states_exited_this_step
                    .iter()
                    .any(|&exited_state| self.is_descendant_or_self(leaf, exited_state))
            });
        }

        // Phase 3: Process entries and add new leaves to next_active_leaf_states
        for (target_id, lca_id, _original_leaf_for_context) in entry_execution_list {
            let new_leaves_from_this_entry = self.execute_entry_actions_from_lca(target_id, lca_id);
            for new_leaf in new_leaves_from_this_entry {
                if !next_active_leaf_states.contains(&new_leaf) {
                    next_active_leaf_states
                        .push(new_leaf)
                        .expect("next_active_leaf_states overflow during entry");
                }
            }
        }

        if overall_transition_occurred {
            self.active_leaf_states = next_active_leaf_states;
        }

        overall_transition_occurred
    }
}

impl<StateType, EventType, ContextType, const M: usize, const MAX_NODES_FOR_COMPUTATION: usize>
    StateMachine for Runtime<StateType, EventType, ContextType, M, MAX_NODES_FOR_COMPUTATION>
where
    StateType: Copy + Clone + PartialEq + Eq + core::hash::Hash + core::fmt::Debug + 'static,
    EventType: Copy + Clone + PartialEq + Eq + core::hash::Hash + core::fmt::Debug + 'static,
    ContextType: Clone + 'static,
{
    type State = StateType;
    type Event = EventType;
    type Context = ContextType;

    fn send(&mut self, event: Self::Event) -> bool {
        Runtime::<StateType, EventType, ContextType, M, MAX_NODES_FOR_COMPUTATION>::send(
            self, event,
        )
    }

    fn state(&self) -> heapless::Vec<Self::State, MAX_ACTIVE_REGIONS> {
        self.active_leaf_states.clone()
    }

    fn context(&self) -> &Self::Context {
        &self.context
    }

    fn context_mut(&mut self) -> &mut Self::Context {
        &mut self.context
    }
}

#[cfg(test)]
mod tests {
    use super::*; //Imports S, E, C types from parent
    use crate::core::DefaultContext; // Ensure DefaultContext is in scope

    // Define const M for tests, e.g., 8, matching old MAX_HIERARCHY_DEPTH for compatibility.
    const TEST_HIERARCHY_DEPTH_M: usize = 8;
    const TEST_MAX_NODES_FOR_COMPUTATION: usize = TEST_HIERARCHY_DEPTH_M * MAX_ACTIVE_REGIONS; // Renamed from TEST_MTMAR

    #[allow(dead_code)] // Allow dead code for S2 variant and potentially others during dev
    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    enum TestState {
        S0,
        S1,
        S2,
    }

    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    enum TestEvent {
        E0,
        E1,
    }

    // Using the DefaultContext from the parent module for this alias
    type TestContextForEmpty = DefaultContext;

    // Define CounterContext at the module scope for tests
    #[derive(Clone, Debug, Default, PartialEq, Eq)]
    struct CounterContext {
        count: i32,
    }

    fn increment_action(context: &mut CounterContext) {
        context.count += 1;
    }
    fn count_is_zero_guard(context: &CounterContext, _event: TestEvent) -> bool {
        context.count == 0
    }

    // Populated StateNode arrays for tests
    const TEST_STATENODES_EMPTY_CTX_POPULATED: &[StateNode<TestState, TestContextForEmpty>] = &[
        StateNode {
            id: TestState::S0,
            parent: None,
            initial_child: None,
            entry_action: None,
            exit_action: None,
            is_parallel: false,
        },
        StateNode {
            id: TestState::S1,
            parent: None,
            initial_child: None,
            entry_action: None,
            exit_action: None,
            is_parallel: false,
        },
        StateNode {
            id: TestState::S2,
            parent: None,
            initial_child: None,
            entry_action: None,
            exit_action: None,
            is_parallel: false,
        },
    ];

    const TEST_STATENODES_COUNTER_CTX_POPULATED: &[StateNode<TestState, CounterContext>] = &[
        StateNode {
            id: TestState::S0,
            parent: None,
            initial_child: None,
            entry_action: None,
            exit_action: None,
            is_parallel: false,
        },
        StateNode {
            id: TestState::S1,
            parent: None,
            initial_child: None,
            entry_action: None,
            exit_action: None,
            is_parallel: false,
        },
        StateNode {
            id: TestState::S2,
            parent: None,
            initial_child: None,
            entry_action: None,
            exit_action: None,
            is_parallel: false,
        },
    ];

    // --- New Test Setup for Hierarchical Transitions ---

    const MAX_LOG_ENTRIES: usize = 64; // Increased from 32
    const MAX_LOG_STRING_LEN: usize = 64; // Max length for a logged action string

    #[derive(Clone, Debug, Default, PartialEq, Eq)]
    struct HierarchicalActionLogContext {
        log: Vec<heapless::String<MAX_LOG_STRING_LEN>, MAX_LOG_ENTRIES>,
    }

    impl HierarchicalActionLogContext {
        fn log_action(&mut self, action_description: &str) {
            let mut s = heapless::String::<MAX_LOG_STRING_LEN>::new();
            s.push_str(action_description)
                .expect("Log string too long for heapless::String");
            self.log
                .push(s) // try_push not strictly necessary if MAX_LOG_ENTRIES is sufficient for tests and we expect it to succeed.
                .expect("Log vec full in HierarchicalActionLogContext");
        }
        fn get_log(&self) -> &Vec<heapless::String<MAX_LOG_STRING_LEN>, MAX_LOG_ENTRIES> {
            &self.log
        }
    }

    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    enum TestHierarchyState {
        ParentOne,
        ChildOneAlpha,            // Child of ParentOne
        GrandchildOneAlphaXray,   // Child of ChildOneAlpha
        GrandchildOneAlphaYankee, // Child of ChildOneAlpha
        ChildOneBravo,            // Child of ParentOne
        ParentTwo,
        ChildTwoAlpha, // Child of ParentTwo
    }

    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    enum TestHierarchyEvent {
        EventTriggerP1ToP2,        // ParentOne to ParentTwo
        EventTriggerToSibling,     // ChildOneAlpha to ChildOneBravo
        EventTriggerToParent,      // GrandchildOneAlphaXray to ChildOneAlpha
        EventTriggerToGrandparent, // GrandchildOneAlphaYankee to ParentOne
        EventTriggerToCousinChild, // ChildOneBravo to GrandchildOneAlphaYankee
        EventTriggerParentReentry, // ChildOneBravo to ParentOne (expect re-entry to P1 initial)
        EventTriggerP2ToP1,        // ParentTwo to ParentOne
        EventTriggerP1ToC1B,       // ParentOne to ChildOneBravo (new)
    }

    // Helper action functions for logging
    fn log_enter_parent_one(ctx: &mut HierarchicalActionLogContext) {
        ctx.log_action("EnterParentOne");
    }
    fn log_exit_parent_one(ctx: &mut HierarchicalActionLogContext) {
        ctx.log_action("ExitParentOne");
    }
    fn log_enter_child_one_alpha(ctx: &mut HierarchicalActionLogContext) {
        ctx.log_action("EnterChildOneAlpha");
    }
    fn log_exit_child_one_alpha(ctx: &mut HierarchicalActionLogContext) {
        ctx.log_action("ExitChildOneAlpha");
    }
    fn log_enter_grandchild_one_alpha_xray(ctx: &mut HierarchicalActionLogContext) {
        ctx.log_action("EnterGrandchildOneAlphaXray");
    }
    fn log_exit_grandchild_one_alpha_xray(ctx: &mut HierarchicalActionLogContext) {
        ctx.log_action("ExitGrandchildOneAlphaXray");
    }
    fn log_enter_grandchild_one_alpha_yankee(ctx: &mut HierarchicalActionLogContext) {
        ctx.log_action("EnterGrandchildOneAlphaYankee");
    }
    fn log_exit_grandchild_one_alpha_yankee(ctx: &mut HierarchicalActionLogContext) {
        ctx.log_action("ExitGrandchildOneAlphaYankee");
    }
    fn log_enter_child_one_bravo(ctx: &mut HierarchicalActionLogContext) {
        ctx.log_action("EnterChildOneBravo");
    }
    fn log_exit_child_one_bravo(ctx: &mut HierarchicalActionLogContext) {
        ctx.log_action("ExitChildOneBravo");
    }
    fn log_enter_parent_two(ctx: &mut HierarchicalActionLogContext) {
        ctx.log_action("EnterParentTwo");
    }
    fn log_exit_parent_two(ctx: &mut HierarchicalActionLogContext) {
        ctx.log_action("ExitParentTwo");
    }
    fn log_enter_child_two_alpha(ctx: &mut HierarchicalActionLogContext) {
        ctx.log_action("EnterChildTwoAlpha");
    }
    fn log_exit_child_two_alpha(ctx: &mut HierarchicalActionLogContext) {
        ctx.log_action("ExitChildTwoAlpha");
    }
    fn log_transition_action(ctx: &mut HierarchicalActionLogContext) {
        ctx.log_action("TransitionAction");
    }

    const TEST_HIERARCHY_STATENODES: &[StateNode<
        TestHierarchyState,
        HierarchicalActionLogContext,
    >] = &[
        // ParentOne level
        StateNode {
            id: TestHierarchyState::ParentOne,
            parent: None,
            initial_child: Some(TestHierarchyState::ChildOneAlpha),
            entry_action: Some(log_enter_parent_one),
            exit_action: Some(log_exit_parent_one),
            is_parallel: false,
        },
        // Children of ParentOne
        StateNode {
            id: TestHierarchyState::ChildOneAlpha,
            parent: Some(TestHierarchyState::ParentOne),
            initial_child: Some(TestHierarchyState::GrandchildOneAlphaXray),
            entry_action: Some(log_enter_child_one_alpha),
            exit_action: Some(log_exit_child_one_alpha),
            is_parallel: false,
        },
        StateNode {
            id: TestHierarchyState::ChildOneBravo,
            parent: Some(TestHierarchyState::ParentOne),
            initial_child: None, // Leaf state
            entry_action: Some(log_enter_child_one_bravo),
            exit_action: Some(log_exit_child_one_bravo),
            is_parallel: false,
        },
        // Grandchildren of ParentOne (children of ChildOneAlpha)
        StateNode {
            id: TestHierarchyState::GrandchildOneAlphaXray,
            parent: Some(TestHierarchyState::ChildOneAlpha),
            initial_child: None, // Leaf state
            entry_action: Some(log_enter_grandchild_one_alpha_xray),
            exit_action: Some(log_exit_grandchild_one_alpha_xray),
            is_parallel: false,
        },
        StateNode {
            id: TestHierarchyState::GrandchildOneAlphaYankee,
            parent: Some(TestHierarchyState::ChildOneAlpha),
            initial_child: None, // Leaf state
            entry_action: Some(log_enter_grandchild_one_alpha_yankee),
            exit_action: Some(log_exit_grandchild_one_alpha_yankee),
            is_parallel: false,
        },
        // ParentTwo level
        StateNode {
            id: TestHierarchyState::ParentTwo,
            parent: None,
            initial_child: Some(TestHierarchyState::ChildTwoAlpha),
            entry_action: Some(log_enter_parent_two),
            exit_action: Some(log_exit_parent_two),
            is_parallel: false,
        },
        // Children of ParentTwo
        StateNode {
            id: TestHierarchyState::ChildTwoAlpha,
            parent: Some(TestHierarchyState::ParentTwo),
            initial_child: None, // Leaf state
            entry_action: Some(log_enter_child_two_alpha),
            exit_action: Some(log_exit_child_two_alpha),
            is_parallel: false,
        },
    ];

    const TEST_HIERARCHY_TRANSITIONS: &[Transition<
        TestHierarchyState,
        TestHierarchyEvent,
        HierarchicalActionLogContext,
    >] = &[
        // EventTriggerP1ToP2: ParentOne to ParentTwo
        Transition {
            from_state: TestHierarchyState::ParentOne,
            event: TestHierarchyEvent::EventTriggerP1ToP2,
            to_state: TestHierarchyState::ParentTwo,
            action: Some(log_transition_action),
            guard: None,
        },
        // New transition for ParentOne to ChildOneBravo
        Transition {
            from_state: TestHierarchyState::ParentOne,
            event: TestHierarchyEvent::EventTriggerP1ToC1B,
            to_state: TestHierarchyState::ChildOneBravo,
            action: Some(log_transition_action), // Add a transition action
            guard: None,
        },
        // EventTriggerToSibling: ChildOneAlpha to ChildOneBravo
        Transition {
            from_state: TestHierarchyState::ChildOneAlpha,
            event: TestHierarchyEvent::EventTriggerToSibling,
            to_state: TestHierarchyState::ChildOneBravo,
            action: Some(log_transition_action),
            guard: None,
        },
        // EventTriggerToParent: GrandchildOneAlphaXray to ChildOneAlpha
        Transition {
            from_state: TestHierarchyState::GrandchildOneAlphaXray,
            event: TestHierarchyEvent::EventTriggerToParent,
            to_state: TestHierarchyState::ChildOneAlpha,
            action: Some(log_transition_action),
            guard: None,
        },
        // EventTriggerToGrandparent: GrandchildOneAlphaYankee to ParentOne
        Transition {
            from_state: TestHierarchyState::GrandchildOneAlphaYankee,
            event: TestHierarchyEvent::EventTriggerToGrandparent,
            to_state: TestHierarchyState::ParentOne,
            action: Some(log_transition_action),
            guard: None,
        },
        // EventTriggerToCousinChild: ChildOneBravo to GrandchildOneAlphaYankee
        Transition {
            from_state: TestHierarchyState::ChildOneBravo,
            event: TestHierarchyEvent::EventTriggerToCousinChild,
            to_state: TestHierarchyState::GrandchildOneAlphaYankee,
            action: Some(log_transition_action),
            guard: None,
        },
        // EventTriggerParentReentry: ChildOneBravo to ParentOne (target is composite ParentOne)
        Transition {
            from_state: TestHierarchyState::ChildOneBravo,
            event: TestHierarchyEvent::EventTriggerParentReentry,
            to_state: TestHierarchyState::ParentOne, // Target ParentOne, should re-enter its initial path
            action: Some(log_transition_action),
            guard: None,
        },
        // EventTriggerP2ToP1: ParentTwo to ParentOne
        Transition {
            from_state: TestHierarchyState::ParentTwo,
            event: TestHierarchyEvent::EventTriggerP2ToP1,
            to_state: TestHierarchyState::ParentOne,
            action: Some(log_transition_action),
            guard: None,
        },
    ];

    #[test]
    fn hierarchical_machine_starts_in_correct_initial_leaf_with_entry_actions() {
        let machine_def = MachineDefinition::new(
            TEST_HIERARCHY_STATENODES,
            TEST_HIERARCHY_TRANSITIONS,
            TestHierarchyState::ParentOne, // Top-level initial state for the machine definition
        );

        let initial_context = HierarchicalActionLogContext::default();
        let runtime =
            Runtime::<_, _, _, TEST_HIERARCHY_DEPTH_M, TEST_MAX_NODES_FOR_COMPUTATION>::new(
                machine_def,
                initial_context,
            );

        // Check final leaf state
        assert_eq!(
            runtime.state().as_slice(),
            &[TestHierarchyState::GrandchildOneAlphaXray]
        );

        // Check entry action log
        let mut expected_log_vec: heapless::Vec<
            heapless::String<MAX_LOG_STRING_LEN>,
            MAX_LOG_ENTRIES,
        > = heapless::Vec::new();
        expected_log_vec
            .push(heapless::String::try_from("EnterParentOne").unwrap())
            .expect("Log full");
        expected_log_vec
            .push(heapless::String::try_from("EnterChildOneAlpha").unwrap())
            .expect("Log full");
        expected_log_vec
            .push(heapless::String::try_from("EnterGrandchildOneAlphaXray").unwrap())
            .expect("Log full");
        assert_eq!(runtime.context().get_log(), &expected_log_vec);
    }

    #[test]
    fn test_sibling_transition_with_lca() {
        let machine_def = MachineDefinition::new(
            TEST_HIERARCHY_STATENODES,
            TEST_HIERARCHY_TRANSITIONS,
            TestHierarchyState::ParentOne, // Initial state path will lead to GrandchildOneAlphaXray
        );

        let mut runtime =
            Runtime::<_, _, _, TEST_HIERARCHY_DEPTH_M, TEST_MAX_NODES_FOR_COMPUTATION>::new(
                machine_def,
                HierarchicalActionLogContext::default(),
            );
        assert_eq!(
            runtime.state().as_slice(),
            &[TestHierarchyState::GrandchildOneAlphaXray]
        ); // Verify starting state
        runtime.context_mut().log.clear(); // Clear initial entry logs

        let event_processed = runtime.send(TestHierarchyEvent::EventTriggerToSibling);
        assert!(
            event_processed,
            "Event EventTriggerToSibling should have been processed"
        );

        // Expected final state: ChildOneBravo
        assert_eq!(
            runtime.state().as_slice(),
            &[TestHierarchyState::ChildOneBravo]
        );

        // Expected actions:
        // 1. Exit GrandchildOneAlphaXray
        // 2. Exit ChildOneAlpha
        // 3. TransitionAction (defined on ChildOneAlpha -> ChildOneBravo transition)
        // 4. Enter ChildOneBravo
        let mut expected_log: heapless::Vec<heapless::String<MAX_LOG_STRING_LEN>, MAX_LOG_ENTRIES> =
            heapless::Vec::new();
        expected_log
            .push(heapless::String::try_from("ExitGrandchildOneAlphaXray").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("ExitChildOneAlpha").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("TransitionAction").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("EnterChildOneBravo").unwrap())
            .expect("Log full");
        assert_eq!(runtime.context().get_log(), &expected_log);
    }

    #[test]
    fn machine_starts_in_initial_state() {
        const TEST_TRANSITIONS: &[Transition<TestState, TestEvent, TestContextForEmpty>] = &[];
        const TEST_MACHINE_DEF: MachineDefinition<TestState, TestEvent, TestContextForEmpty> =
            MachineDefinition::new(
                TEST_STATENODES_EMPTY_CTX_POPULATED,
                TEST_TRANSITIONS,
                TestState::S0,
            );

        let initial_context = DefaultContext::default();
        let runtime =
            Runtime::<_, _, _, TEST_HIERARCHY_DEPTH_M, TEST_MAX_NODES_FOR_COMPUTATION>::new(
                TEST_MACHINE_DEF,
                initial_context,
            );
        assert_eq!(runtime.state().as_slice(), &[TestState::S0]);
    }

    #[test]
    fn send_event_triggers_transition_and_action() {
        const ACTION_TRANSITIONS: &[Transition<TestState, TestEvent, CounterContext>] =
            &[Transition {
                from_state: TestState::S0,
                event: TestEvent::E0,
                to_state: TestState::S1,
                action: Some(increment_action),
                guard: None,
            }];
        const TEST_MACHINE_DEF: MachineDefinition<TestState, TestEvent, CounterContext> =
            MachineDefinition::new(
                TEST_STATENODES_COUNTER_CTX_POPULATED,
                ACTION_TRANSITIONS,
                TestState::S0,
            );

        let initial_context = CounterContext { count: 0 };
        let mut runtime =
            Runtime::<_, _, _, TEST_HIERARCHY_DEPTH_M, TEST_MAX_NODES_FOR_COMPUTATION>::new(
                TEST_MACHINE_DEF,
                initial_context,
            );

        assert!(runtime.send(TestEvent::E0));
        assert_eq!(runtime.state().as_slice(), &[TestState::S1]);
        assert_eq!(runtime.context().count, 1);
    }

    #[test]
    fn send_event_no_transition_if_guard_fails() {
        const GUARDED_TRANSITIONS: &[Transition<TestState, TestEvent, CounterContext>] =
            &[Transition {
                from_state: TestState::S0,
                event: TestEvent::E0,
                to_state: TestState::S1,
                action: Some(increment_action),
                guard: Some(count_is_zero_guard),
            }];
        const TEST_MACHINE_DEF: MachineDefinition<TestState, TestEvent, CounterContext> =
            MachineDefinition::new(
                TEST_STATENODES_COUNTER_CTX_POPULATED,
                GUARDED_TRANSITIONS,
                TestState::S0,
            );

        let mut runtime =
            Runtime::<_, _, _, TEST_HIERARCHY_DEPTH_M, TEST_MAX_NODES_FOR_COMPUTATION>::new(
                TEST_MACHINE_DEF,
                CounterContext { count: 1 },
            ); // count is not 0
        assert!(!runtime.send(TestEvent::E0)); // Guard should fail
        assert_eq!(runtime.state().as_slice(), &[TestState::S0]);
        assert_eq!(runtime.context().count, 1); // Action should not run

        let mut runtime_pass =
            Runtime::<_, _, _, TEST_HIERARCHY_DEPTH_M, TEST_MAX_NODES_FOR_COMPUTATION>::new(
                TEST_MACHINE_DEF,
                CounterContext { count: 0 },
            ); // count is 0
        assert!(runtime_pass.send(TestEvent::E0)); // Guard should pass
        assert_eq!(runtime_pass.state().as_slice(), &[TestState::S1]);
        assert_eq!(runtime_pass.context().count, 1); // Action should run
    }

    #[test]
    fn context_mut_provides_mutable_access() {
        const NO_TRANSITIONS: &[Transition<TestState, TestEvent, CounterContext>] = &[];
        const TEST_MACHINE_DEF: MachineDefinition<TestState, TestEvent, CounterContext> =
            MachineDefinition::new(
                TEST_STATENODES_COUNTER_CTX_POPULATED,
                NO_TRANSITIONS,
                TestState::S0,
            );

        let initial_context = CounterContext { count: 42 };
        let mut runtime =
            Runtime::<_, _, _, TEST_HIERARCHY_DEPTH_M, TEST_MAX_NODES_FOR_COMPUTATION>::new(
                TEST_MACHINE_DEF,
                initial_context,
            );

        runtime.context_mut().count += 1;
        assert_eq!(runtime.context().count, 43);
    }

    #[test]
    fn no_transition_if_event_does_not_match() {
        const TEST_TRANSITIONS: &[Transition<TestState, TestEvent, TestContextForEmpty>] =
            &[Transition {
                from_state: TestState::S0,
                event: TestEvent::E0,
                to_state: TestState::S1,
                action: None,
                guard: None,
            }];
        const TEST_MACHINE_DEF: MachineDefinition<TestState, TestEvent, TestContextForEmpty> =
            MachineDefinition::new(
                TEST_STATENODES_EMPTY_CTX_POPULATED,
                TEST_TRANSITIONS,
                TestState::S0,
            );
        let mut runtime =
            Runtime::<_, _, _, TEST_HIERARCHY_DEPTH_M, TEST_MAX_NODES_FOR_COMPUTATION>::new(
                TEST_MACHINE_DEF,
                DefaultContext::default(),
            );
        assert!(!runtime.send(TestEvent::E1)); // Different event
        assert_eq!(runtime.state().as_slice(), &[TestState::S0]);
    }

    #[test]
    fn no_transition_if_state_does_not_match() {
        const TEST_TRANSITIONS: &[Transition<TestState, TestEvent, TestContextForEmpty>] =
            &[Transition {
                from_state: TestState::S0,
                event: TestEvent::E0,
                to_state: TestState::S1,
                action: None,
                guard: None,
            }];
        const TEST_MACHINE_DEF: MachineDefinition<TestState, TestEvent, TestContextForEmpty> =
            MachineDefinition::new(
                TEST_STATENODES_EMPTY_CTX_POPULATED,
                TEST_TRANSITIONS,
                TestState::S1,
            ); // Start in S1
        let mut runtime =
            Runtime::<_, _, _, TEST_HIERARCHY_DEPTH_M, TEST_MAX_NODES_FOR_COMPUTATION>::new(
                TEST_MACHINE_DEF,
                DefaultContext::default(),
            );
        assert!(!runtime.send(TestEvent::E0)); // Event E0 is for S0
        assert_eq!(runtime.state().as_slice(), &[TestState::S1]);
    }

    #[test]
    fn test_child_to_parent_transition() {
        let machine_def = MachineDefinition::new(
            TEST_HIERARCHY_STATENODES,
            TEST_HIERARCHY_TRANSITIONS,
            TestHierarchyState::ParentOne, // Initial: GrandchildOneAlphaXray
        );
        let mut runtime =
            Runtime::<_, _, _, TEST_HIERARCHY_DEPTH_M, TEST_MAX_NODES_FOR_COMPUTATION>::new(
                machine_def,
                HierarchicalActionLogContext::default(),
            );
        assert_eq!(
            runtime.state().as_slice(),
            &[TestHierarchyState::GrandchildOneAlphaXray]
        );
        runtime.context_mut().log.clear();

        let event_processed = runtime.send(TestHierarchyEvent::EventTriggerToParent);
        assert!(
            event_processed,
            "Event EventTriggerToParent should have been processed"
        );

        // Expected final state: GrandchildOneAlphaXray (due to re-entry into ChildOneAlpha's initial)
        assert_eq!(
            runtime.state().as_slice(),
            &[TestHierarchyState::GrandchildOneAlphaXray]
        );

        // Expected actions for child-to-parent (GrandchildOneAlphaXray to ChildOneAlpha):
        // 1. Exit GrandchildOneAlphaXray
        // 2. TransitionAction (defined on GC1AX -> C1A transition)
        // 3. Enter ChildOneAlpha (target of transition)
        // 4. Enter GrandchildOneAlphaXray (initial child of ChildOneAlpha)
        let mut expected_log: heapless::Vec<heapless::String<MAX_LOG_STRING_LEN>, MAX_LOG_ENTRIES> =
            heapless::Vec::new();
        expected_log
            .push(heapless::String::try_from("ExitGrandchildOneAlphaXray").unwrap())
            .expect("Log full");
        // ChildOneAlpha should NOT be exited if it's the target of the transition.
        // The previous diff incorrectly showed this line being re-added by the model.
        // It should remain commented out or removed as per the reasoning.
        // expected_log
        //     .push(heapless::String::try_from("ExitChildOneAlpha").unwrap())
        //     .expect("Log full");
        expected_log
            .push(heapless::String::try_from("TransitionAction").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("EnterChildOneAlpha").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("EnterGrandchildOneAlphaXray").unwrap())
            .expect("Log full");
        assert_eq!(runtime.context().get_log(), &expected_log);
    }

    #[test]
    fn test_parent_to_child_transition() {
        let machine_def = MachineDefinition::new(
            TEST_HIERARCHY_STATENODES,
            TEST_HIERARCHY_TRANSITIONS,
            TestHierarchyState::ParentOne, // Initial: GrandchildOneAlphaXray
        );
        let mut runtime =
            Runtime::<_, _, _, TEST_HIERARCHY_DEPTH_M, TEST_MAX_NODES_FOR_COMPUTATION>::new(
                machine_def,
                HierarchicalActionLogContext::default(),
            );
        assert_eq!(
            runtime.state().as_slice(),
            &[TestHierarchyState::GrandchildOneAlphaXray]
        ); // Current leaf
        runtime.context_mut().log.clear();

        let event_processed = runtime.send(TestHierarchyEvent::EventTriggerP1ToC1B);
        assert!(
            event_processed,
            "Event EventTriggerP1ToC1B should have been processed"
        );

        // Expected final state: ChildOneBravo (since it's a leaf)
        assert_eq!(
            runtime.state().as_slice(),
            &[TestHierarchyState::ChildOneBravo]
        );

        // Expected actions:
        // 1. Exit GrandchildOneAlphaXray
        // 2. Exit ChildOneAlpha
        // (Transition is on ParentOne, exits happen from current leaf up to ParentOne)
        // 3. TransitionAction (from P1 -> C1B transition)
        // 4. Enter ChildOneBravo (target is leaf, directly entered)
        let mut expected_log: heapless::Vec<heapless::String<MAX_LOG_STRING_LEN>, MAX_LOG_ENTRIES> =
            heapless::Vec::new();
        expected_log
            .push(heapless::String::try_from("ExitGrandchildOneAlphaXray").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("ExitChildOneAlpha").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("TransitionAction").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("EnterChildOneBravo").unwrap())
            .expect("Log full");
        assert_eq!(runtime.context().get_log(), &expected_log);
    }

    #[test]
    fn test_grandchild_to_grandparent_reentry() {
        // Initial state: ParentOne -> ChildOneAlpha -> GrandchildOneAlphaXray
        // Setup to start in GrandchildOneAlphaYankee for this test.
        // This requires a bit of manual setup or a dedicated initial state for the test.
        // For simplicity, we'll send events to navigate to GrandchildOneAlphaYankee first.

        let machine_def = MachineDefinition::new(
            TEST_HIERARCHY_STATENODES,
            TEST_HIERARCHY_TRANSITIONS,
            TestHierarchyState::ParentOne,
        );
        let mut runtime =
            Runtime::<_, _, _, TEST_HIERARCHY_DEPTH_M, TEST_MAX_NODES_FOR_COMPUTATION>::new(
                machine_def,
                HierarchicalActionLogContext::default(),
            );
        assert_eq!(
            runtime.state().as_slice(),
            &[TestHierarchyState::GrandchildOneAlphaXray]
        );

        // Navigate to ChildOneBravo first (sibling of ChildOneAlpha)
        // EventTriggerToSibling is on ChildOneAlpha
        runtime.send(TestHierarchyEvent::EventTriggerToSibling);
        assert_eq!(
            runtime.state().as_slice(),
            &[TestHierarchyState::ChildOneBravo]
        );

        // Navigate from ChildOneBravo to GrandchildOneAlphaYankee
        // EventTriggerToCousinChild is on ChildOneBravo
        runtime.send(TestHierarchyEvent::EventTriggerToCousinChild);
        assert_eq!(
            runtime.state().as_slice(),
            &[TestHierarchyState::GrandchildOneAlphaYankee]
        ); // Now we are in GCAY

        runtime.context_mut().log.clear(); // Clear log before the actual test transition

        let event_processed = runtime.send(TestHierarchyEvent::EventTriggerToGrandparent);
        assert!(
            event_processed,
            "Event EventTriggerToGrandparent should have been processed"
        );

        // Expected final state: GrandchildOneAlphaXray (ParentOne re-enters its initial path)
        assert_eq!(
            runtime.state().as_slice(),
            &[TestHierarchyState::GrandchildOneAlphaXray]
        );

        // Expected actions:
        // 1. Exit GrandchildOneAlphaYankee
        // 2. Exit ChildOneAlpha
        // 3. TransitionAction (from GCAY -> P1 transition)
        // 4. Enter ParentOne
        // 5. Enter ChildOneAlpha (initial child of P1)
        // 6. Enter GrandchildOneAlphaXray (initial child of C1A)
        let mut expected_log: heapless::Vec<heapless::String<MAX_LOG_STRING_LEN>, MAX_LOG_ENTRIES> =
            heapless::Vec::new();
        expected_log
            .push(heapless::String::try_from("ExitGrandchildOneAlphaYankee").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("ExitChildOneAlpha").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("TransitionAction").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("EnterParentOne").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("EnterChildOneAlpha").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("EnterGrandchildOneAlphaXray").unwrap())
            .expect("Log full");
        assert_eq!(runtime.context().get_log(), &expected_log);
    }

    #[test]
    fn test_cousin_child_transition() {
        // Initial state: ParentOne -> ChildOneAlpha -> GrandchildOneAlphaXray
        // Navigate to ChildOneBravo first.
        let machine_def = MachineDefinition::new(
            TEST_HIERARCHY_STATENODES,
            TEST_HIERARCHY_TRANSITIONS,
            TestHierarchyState::ParentOne,
        );
        let mut runtime =
            Runtime::<_, _, _, TEST_HIERARCHY_DEPTH_M, TEST_MAX_NODES_FOR_COMPUTATION>::new(
                machine_def,
                HierarchicalActionLogContext::default(),
            );
        assert_eq!(
            runtime.state().as_slice(),
            &[TestHierarchyState::GrandchildOneAlphaXray]
        );

        // EventTriggerToSibling defined on ChildOneAlpha, from current GCAX, goes up to C1A
        runtime.send(TestHierarchyEvent::EventTriggerToSibling);
        assert_eq!(
            runtime.state().as_slice(),
            &[TestHierarchyState::ChildOneBravo]
        ); // Now in ChildOneBravo
        runtime.context_mut().log.clear();

        let event_processed = runtime.send(TestHierarchyEvent::EventTriggerToCousinChild);
        assert!(
            event_processed,
            "Event EventTriggerToCousinChild should have been processed"
        );

        // Expected final state: GrandchildOneAlphaYankee
        assert_eq!(
            runtime.state().as_slice(),
            &[TestHierarchyState::GrandchildOneAlphaYankee]
        );

        // LCA(ChildOneBravo, GrandchildOneAlphaYankee) is ParentOne.
        // ChildOneBravo is child of ParentOne.
        // GrandchildOneAlphaYankee is child of ChildOneAlpha, which is child of ParentOne.
        // Path from ParentOne (LCA) to GrandchildOneAlphaYankee: ParentOne -> ChildOneAlpha -> GrandchildOneAlphaYankee
        // Expected actions:
        // 1. Exit ChildOneBravo
        // 2. TransitionAction (from C1B -> GCAY transition)
        // 3. Enter ChildOneAlpha (intermediate state on path from LCA's child to target)
        // 4. Enter GrandchildOneAlphaYankee (target state, and it's a leaf)
        let mut expected_log: heapless::Vec<heapless::String<MAX_LOG_STRING_LEN>, MAX_LOG_ENTRIES> =
            heapless::Vec::new();
        expected_log
            .push(heapless::String::try_from("ExitChildOneBravo").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("TransitionAction").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("EnterChildOneAlpha").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("EnterGrandchildOneAlphaYankee").unwrap())
            .expect("Log full");
        assert_eq!(runtime.context().get_log(), &expected_log);
    }

    #[test]
    fn test_cross_top_level_parent_transition() {
        // Initial state: ParentOne -> ChildOneAlpha -> GrandchildOneAlphaXray
        let machine_def = MachineDefinition::new(
            TEST_HIERARCHY_STATENODES,
            TEST_HIERARCHY_TRANSITIONS,
            TestHierarchyState::ParentOne,
        );
        let mut runtime =
            Runtime::<_, _, _, TEST_HIERARCHY_DEPTH_M, TEST_MAX_NODES_FOR_COMPUTATION>::new(
                machine_def,
                HierarchicalActionLogContext::default(),
            );
        assert_eq!(
            runtime.state().as_slice(),
            &[TestHierarchyState::GrandchildOneAlphaXray]
        );
        runtime.context_mut().log.clear();

        // EventTriggerP1ToP2 is defined on ParentOne.
        // Current state GCAX will bubble up to P1 to find this transition.
        let event_processed = runtime.send(TestHierarchyEvent::EventTriggerP1ToP2);
        assert!(
            event_processed,
            "Event EventTriggerP1ToP2 should have been processed"
        );

        // Expected final state: ChildTwoAlpha (ParentTwo re-enters its initial path)
        assert_eq!(
            runtime.state().as_slice(),
            &[TestHierarchyState::ChildTwoAlpha]
        );

        // LCA(GrandchildOneAlphaXray, ParentTwo) is None (or conceptual root).
        // Exit path from GCAX: GCAX -> C1A -> P1
        // Entry path to CTA (initial of P2): P2 -> CTA
        // Expected actions:
        // 1. Exit GrandchildOneAlphaXray
        // 2. Exit ChildOneAlpha
        // 3. Exit ParentOne
        // 4. TransitionAction (from P1 -> P2 transition)
        // 5. Enter ParentTwo
        // 6. Enter ChildTwoAlpha (initial child of P2)
        let mut expected_log: heapless::Vec<heapless::String<MAX_LOG_STRING_LEN>, MAX_LOG_ENTRIES> =
            heapless::Vec::new();
        expected_log
            .push(heapless::String::try_from("ExitGrandchildOneAlphaXray").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("ExitChildOneAlpha").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("ExitParentOne").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("TransitionAction").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("EnterParentTwo").unwrap())
            .expect("Log full");
        expected_log
            .push(heapless::String::try_from("EnterChildTwoAlpha").unwrap())
            .expect("Log full");
        assert_eq!(runtime.context().get_log(), &expected_log);
    }

    // --- Tests for Multiple Guard Selection ---

    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    enum MultiGuardTestState {
        InitialState,
        TargetStateOne,
        TargetStateTwo,
        TargetStateThree,
    }

    #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
    enum MultiGuardTestEvent {
        TriggerEvent,
    }

    #[derive(Clone, Debug, Default, PartialEq, Eq)]
    struct MultiGuardContext {
        selector_value: i32,
        action_taken_for: Option<MultiGuardTestState>,
    }

    fn guard_for_target_one(context: &MultiGuardContext, _event: MultiGuardTestEvent) -> bool {
        context.selector_value == 1
    }
    fn action_for_target_one(context: &mut MultiGuardContext) {
        context.action_taken_for = Some(MultiGuardTestState::TargetStateOne);
    }

    fn guard_for_target_two(context: &MultiGuardContext, _event: MultiGuardTestEvent) -> bool {
        context.selector_value == 2
    }
    fn action_for_target_two(context: &mut MultiGuardContext) {
        context.action_taken_for = Some(MultiGuardTestState::TargetStateTwo);
    }

    fn guard_for_target_three(context: &MultiGuardContext, _event: MultiGuardTestEvent) -> bool {
        context.selector_value == 3
    }
    fn action_for_target_three(context: &mut MultiGuardContext) {
        context.action_taken_for = Some(MultiGuardTestState::TargetStateThree);
    }

    const MULTI_GUARD_STATENODES: &[StateNode<MultiGuardTestState, MultiGuardContext>] = &[
        StateNode {
            id: MultiGuardTestState::InitialState,
            parent: None,
            initial_child: None,
            entry_action: None,
            exit_action: None,
            is_parallel: false,
        },
        StateNode {
            id: MultiGuardTestState::TargetStateOne,
            parent: None,
            initial_child: None,
            entry_action: None,
            exit_action: None,
            is_parallel: false,
        },
        StateNode {
            id: MultiGuardTestState::TargetStateTwo,
            parent: None,
            initial_child: None,
            entry_action: None,
            exit_action: None,
            is_parallel: false,
        },
        StateNode {
            id: MultiGuardTestState::TargetStateThree,
            parent: None,
            initial_child: None,
            entry_action: None,
            exit_action: None,
            is_parallel: false,
        },
    ];

    const MULTI_GUARD_TRANSITIONS: &[Transition<
        MultiGuardTestState,
        MultiGuardTestEvent,
        MultiGuardContext,
    >] = &[
        Transition {
            from_state: MultiGuardTestState::InitialState,
            event: MultiGuardTestEvent::TriggerEvent,
            to_state: MultiGuardTestState::TargetStateOne,
            action: Some(action_for_target_one),
            guard: Some(guard_for_target_one),
        },
        Transition {
            from_state: MultiGuardTestState::InitialState,
            event: MultiGuardTestEvent::TriggerEvent,
            to_state: MultiGuardTestState::TargetStateTwo,
            action: Some(action_for_target_two),
            guard: Some(guard_for_target_two),
        },
        Transition {
            from_state: MultiGuardTestState::InitialState,
            event: MultiGuardTestEvent::TriggerEvent,
            to_state: MultiGuardTestState::TargetStateThree,
            action: Some(action_for_target_three),
            guard: Some(guard_for_target_three),
        },
    ];

    #[test]
    fn test_multiple_guards_selects_correct_transition() {
        let machine_def = MachineDefinition::new(
            MULTI_GUARD_STATENODES,
            MULTI_GUARD_TRANSITIONS,
            MultiGuardTestState::InitialState,
        );

        // Scenario 1: Guard for TargetStateOne passes
        let mut runtime1 =
            Runtime::<_, _, _, TEST_HIERARCHY_DEPTH_M, TEST_MAX_NODES_FOR_COMPUTATION>::new(
                machine_def.clone(),
                MultiGuardContext {
                    selector_value: 1,
                    action_taken_for: None,
                },
            );
        assert!(runtime1.send(MultiGuardTestEvent::TriggerEvent));
        assert_eq!(
            runtime1.state().as_slice(),
            &[MultiGuardTestState::TargetStateOne]
        );
        assert_eq!(
            runtime1.context().action_taken_for,
            Some(MultiGuardTestState::TargetStateOne)
        );

        // Scenario 2: Guard for TargetStateTwo passes
        let mut runtime2 =
            Runtime::<_, _, _, TEST_HIERARCHY_DEPTH_M, TEST_MAX_NODES_FOR_COMPUTATION>::new(
                machine_def.clone(),
                MultiGuardContext {
                    selector_value: 2,
                    action_taken_for: None,
                },
            );
        assert!(runtime2.send(MultiGuardTestEvent::TriggerEvent));
        assert_eq!(
            runtime2.state().as_slice(),
            &[MultiGuardTestState::TargetStateTwo]
        );
        assert_eq!(
            runtime2.context().action_taken_for,
            Some(MultiGuardTestState::TargetStateTwo)
        );

        // Scenario 3: Guard for TargetStateThree passes
        let mut runtime3 =
            Runtime::<_, _, _, TEST_HIERARCHY_DEPTH_M, TEST_MAX_NODES_FOR_COMPUTATION>::new(
                machine_def.clone(),
                MultiGuardContext {
                    selector_value: 3,
                    action_taken_for: None,
                },
            );
        assert!(runtime3.send(MultiGuardTestEvent::TriggerEvent));
        assert_eq!(
            runtime3.state().as_slice(),
            &[MultiGuardTestState::TargetStateThree]
        );
        assert_eq!(
            runtime3.context().action_taken_for,
            Some(MultiGuardTestState::TargetStateThree)
        );

        // Scenario 4: No guard passes
        let mut runtime4 =
            Runtime::<_, _, _, TEST_HIERARCHY_DEPTH_M, TEST_MAX_NODES_FOR_COMPUTATION>::new(
                machine_def.clone(),
                MultiGuardContext {
                    selector_value: 4,
                    action_taken_for: None,
                },
            );
        assert!(!runtime4.send(MultiGuardTestEvent::TriggerEvent));
        assert_eq!(
            runtime4.state().as_slice(),
            &[MultiGuardTestState::InitialState]
        );
        assert_eq!(runtime4.context().action_taken_for, None);

        // Scenario 5: First matching guard (selector_value = 1) even if others would also pass
        // This relies on the order of transitions in MULTI_GUARD_TRANSITIONS
        // and the runtime iterating them in that order.
        let mut runtime5 =
            Runtime::<_, _, _, TEST_HIERARCHY_DEPTH_M, TEST_MAX_NODES_FOR_COMPUTATION>::new(
                machine_def.clone(),
                MultiGuardContext {
                    selector_value: 1,
                    action_taken_for: None,
                },
            );
        // (If guards could somehow make selector_value change to 2 mid-evaluation, this test would be more complex,
        // but simple guards don't do that. Assuming guards are pure functions of context and event.)
        assert!(runtime5.send(MultiGuardTestEvent::TriggerEvent));
        assert_eq!(
            runtime5.state().as_slice(),
            &[MultiGuardTestState::TargetStateOne],
            "Expected TargetStateOne due to transition order"
        );
        assert_eq!(
            runtime5.context().action_taken_for,
            Some(MultiGuardTestState::TargetStateOne)
        );
    }
}
