name: Rust CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check-and-lint:
    name: Check & Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: [stable, beta, nightly]
    steps:
    - uses: actions/checkout@v4
    - name: Install ${{ matrix.toolchain }} toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.toolchain }}
        components: rustfmt, clippy

    - name: Check formatting
      if: matrix.toolchain == 'stable' # Only check fmt on stable
      run: cargo fmt --check

    - name: Run Clippy
      run: cargo clippy --all-targets --workspace -- -D warnings

    - name: Run cargo check (all targets)
      run: cargo check --all-targets --workspace

    - name: Install cargo-hack
      if: matrix.toolchain == 'stable' # Only run feature matrix on stable
      run: cargo install cargo-hack --locked

    - name: Test feature matrix (lit-bit-core only)
      if: matrix.toolchain == 'stable'
      run: cd lit-bit-core && cargo hack check --feature-powerset --no-dev-deps --exclude-features embassy

  embedded-targets:
    name: Embedded Targets
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust (stable) + Targets
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        targets: |
          thumbv7m-none-eabi
          riscv32imac-unknown-none-elf

    - name: Check no_std builds (Cortex-M)
      run: cd lit-bit-core && cargo check --target thumbv7m-none-eabi --no-default-features

    - name: Check no_std builds (RISC-V)
      run: cd lit-bit-core && cargo check --target riscv32imac-unknown-none-elf --no-default-features

  heap-safety-scan:
    name: Heap/Unsafe Scan (Strict for lit-bit-core only, Cortex-M)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust (stable) + Targets
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        targets: |
          thumbv7m-none-eabi
          riscv32imac-unknown-none-elf

    - name: Install cargo-geiger
      run: cargo install cargo-geiger --locked

    - name: Heap/Unsafe Scan (Strict for lit-bit-core only, Cortex-M)
      run: |
        # Run cargo-geiger and capture both stdout and stderr, but ignore warnings in exit code
        set +e
        cargo geiger --output-format Json --target thumbv7m-none-eabi --no-default-features -p lit-bit-core --manifest-path ${{ github.workspace }}/lit-bit-core/Cargo.toml > geiger_report.json 2>geiger_warnings.log
        geiger_exit_code=$?
        set -e

        # Show the warnings for debugging but don't fail on them
        if [ -s geiger_warnings.log ]; then
          echo "Geiger warnings (non-fatal):"
          cat geiger_warnings.log
        fi

        # Only fail if it's a real error (not just warnings)
        if [ $geiger_exit_code -ne 0 ] && [ $geiger_exit_code -ne 1 ]; then
          echo "Cargo geiger failed with exit code $geiger_exit_code"
          exit $geiger_exit_code
        fi

        echo "Generated geiger report:"
        cat geiger_report.json
        cargo run --bin heap-safety-check --package lit-bit-cli

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust (stable)
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Run tests
      run: cargo test --workspace

  cli-run:
    name: CLI Run Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust (stable)
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Test CLI run
      run: cargo run --bin lit-bit-cli --package lit-bit-cli --all-features

  # Future jobs could include:
  # - cargo test
  # - cargo build --release --target <target>
  # - cargo publish --dry-run
  # - cargo audit
  # - cargo deny check 