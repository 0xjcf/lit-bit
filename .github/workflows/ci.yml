name: Rust CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check-and-lint:
    name: Check & Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: [stable, beta, nightly]
    steps:
    - uses: actions/checkout@v4
    - name: Install ${{ matrix.toolchain }} toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.toolchain }}
        components: rustfmt, clippy

    - name: Check formatting
      if: matrix.toolchain == 'stable' # Only check fmt on stable
      run: cargo fmt --check

    - name: Run Clippy
      run: cargo clippy --all-targets --workspace -- -D warnings

    - name: Run cargo check (all targets)
      run: cargo check --all-targets --workspace

    - name: Feature matrix testing
      if: matrix.toolchain == 'stable' # Only run feature matrix on stable
      run: |
        set -euo pipefail
        
        echo "üîç Testing individual feature combinations"
        
        # Test core library feature combinations individually
        echo "üì¶ Testing lit-bit-core features..."
        
        # Default features
        echo "  ‚úì Default features"
        cargo check -p lit-bit-core
        
        # No default features
        echo "  ‚úì No default features"
        cargo check -p lit-bit-core --no-default-features
        
        # Individual async runtime features (mutually exclusive)
        echo "  ‚úì async-tokio feature"
        cargo check -p lit-bit-core --no-default-features --features async-tokio
        
        echo "  ‚úì async-embassy feature"
        cargo check -p lit-bit-core --no-default-features --features async-embassy
        
        # Other individual features
        echo "  ‚úì alloc feature"
        cargo check -p lit-bit-core --no-default-features --features alloc
        
        echo "  ‚úì std feature"
        cargo check -p lit-bit-core --no-default-features --features std
        
        echo "  ‚úì diagram feature"
        cargo check -p lit-bit-core --no-default-features --features diagram
        
        # Compatible feature combinations
        echo "  ‚úì alloc + async-tokio"
        cargo check -p lit-bit-core --no-default-features --features alloc,async-tokio
        
        echo "  ‚úì alloc + async-embassy"
        cargo check -p lit-bit-core --no-default-features --features alloc,async-embassy
        
        echo "  ‚úì std + diagram"
        cargo check -p lit-bit-core --no-default-features --features std,diagram
        
        # Test that mutually exclusive combinations fail correctly
        echo "üö´ Verifying mutually exclusive feature protection..."
        if cargo check -p lit-bit-core --no-default-features --features async-tokio,async-embassy 2>/dev/null; then
          echo "‚ùå ERROR: Mutually exclusive features should fail compilation!"
          exit 1
        else
          echo "  ‚úì async-tokio + async-embassy correctly fails"
        fi
        
        # Test workspace members with their specific feature combinations
        echo "üì¶ Testing workspace members..."
        
        echo "  ‚úì lit-bit-tests (with async-tokio)"
        cargo check -p lit-bit-tests --features async-tokio
        
        echo "  ‚úì lit-bit-bench"
        cargo check -p lit-bit-bench
        
        echo "  ‚úì lit-bit-cli"
        cargo check -p lit-bit-cli
        
        echo "‚úÖ All feature combinations tested successfully!"

  embedded-targets:
    name: Embedded Targets
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust (stable) + Targets
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        targets: |
          thumbv7m-none-eabi
          riscv32imac-unknown-none-elf

    - name: Check no_std builds (Cortex-M)
      run: cd lit-bit-core && cargo check --target thumbv7m-none-eabi --no-default-features

    - name: Check no_std builds (RISC-V)
      run: cd lit-bit-core && cargo check --target riscv32imac-unknown-none-elf --no-default-features

  heap-safety-scan:
    name: Heap/Unsafe Scan (Strict for lit-bit-core only, Cortex-M)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust (stable) + Targets
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        targets: |
          thumbv7m-none-eabi
          riscv32imac-unknown-none-elf

    - name: Install cargo-geiger
      run: cargo install cargo-geiger --locked

    - name: Heap/Unsafe Scan (Strict for lit-bit-core only, Cortex-M)
      run: |
        # Run cargo-geiger from the lit-bit-core directory to avoid workspace issues
        cd lit-bit-core
        
        # Run cargo-geiger and capture both stdout and stderr, but ignore warnings in exit code
        set +e
        cargo geiger --output-format Json --target thumbv7m-none-eabi --no-default-features > ../geiger_report.json 2>../geiger_warnings.log
        geiger_exit_code=$?
        set -e
        
        cd ..

        # Show the warnings for debugging but don't fail on them
        if [ -s geiger_warnings.log ]; then
          echo "Geiger warnings (non-fatal):"
          cat geiger_warnings.log
        fi

        # Check if geiger_report.json is empty or if geiger failed completely
        if [ ! -s geiger_report.json ]; then
          echo "‚ùå Cargo geiger failed to generate a report or generated an empty report"
          echo "Exit code was: $geiger_exit_code"
          if [ -s geiger_warnings.log ]; then
            echo "Last few lines of warnings:"
            tail -10 geiger_warnings.log
          fi
          exit 1
        fi

        echo "Generated geiger report:"
        cat geiger_report.json
        cargo run --bin heap-safety-check --package lit-bit-cli

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust (stable)
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Run core tests
      run: cargo test -p lit-bit-core --lib --bins

    - name: Run macro tests
      run: cargo test -p lit-bit-macro

    - name: Run integration tests
      run: cargo test -p lit-bit-tests

    - name: Check benchmarks compile
      run: cargo check -p lit-bit-bench

  xtask-automation:
    name: Xtask Automation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust (stable) + Targets
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        targets: |
          thumbv7m-none-eabi
          riscv32imac-unknown-none-elf

    - name: Test xtask CI automation
      run: cargo run --manifest-path xtask/Cargo.toml -- check-all

    - name: Test benchmark smoke check
      run: cargo run --manifest-path xtask/Cargo.toml -- bench --smoke

  cli-run:
    name: CLI Run Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust (stable)
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Test CLI run
      run: cargo run --bin lit-bit-cli --package lit-bit-cli --all-features

  # Future jobs could include:
  # - cargo test
  # - cargo build --release --target <target>
  # - cargo publish --dry-run
  # - cargo audit
  # - cargo deny check 